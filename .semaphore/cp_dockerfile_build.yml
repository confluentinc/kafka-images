# This file is managed by ServiceBot plugin - Semaphore. The content in this file is created using a common
# template and configurations in service.yml.
# Any modifications made to ths file will be overwritten by the generated content in nightly runs.
# For more information, please refer to the page:
# https://confluentinc.atlassian.net/wiki/spaces/Foundations/pages/2871296194/Add+SemaphoreCI
version: v1.0
name: build-test-release
agent:
  machine:
    type: s1-prod-ubuntu20-04-amd64-1

fail_fast:
  cancel:
    when: "true"

execution_time_limit:
  hours: 1

queue:
  - when: "branch != 'master' and branch !~ '[0-9]+\\.[0-9]+\\.[0-9]+'"
    processing: parallel

global_job_config:
  prologue:
    commands:
      - checkout
#      - if [[ $SEMAPHORE_GIT_BRANCH =~ ^7\..* ]]; then sem-version java 8; else sem-version java 17; fi
      - sem-version java 8
      - . vault-setup
      - . cache-maven restore
      - pip install tox==3.28.0
      - export GIT_COMMIT=$(git rev-parse --verify HEAD --short)
      - export BUILD_NUMBER=$(echo $SEMAPHORE_WORKFLOW_ID | cut -f1 -d"-")
      - export BRANCH_TAG=$(echo $SEMAPHORE_GIT_BRANCH | tr / -)
      # Semaphore does not accept empty values for parameters.
      - export ALLOW_UNSIGNED=$(echo $ALLOW_UNSIGNED | awk '{ print tolower($0) }')
      - >-
        echo """
        Parameters:
        ==========================
        CONFLUENT_VERSION: $CONFLUENT_VERSION
        PACKAGES_URL: $PACKAGES_URL
        PACKAGES_MAVEN_URL: $PACKAGES_MAVEN_URL
        PACKAGING_BUILD_NUMBER: $PACKAGING_BUILD_NUMBER
        ALLOW_UNSIGNED: $ALLOW_UNSIGNED
        CONFLUENT_DEB_VERSION: $CONFLUENT_DEB_VERSION
        """
      - if [[ $BRANCH_TAG =~ "-rc" ]]; then export IS_RC="true"; fi
      - if [[ $BRANCH_TAG =~ "-cp" ]]; then export IS_HOTFIX="true"; fi
      - if [[ $BRANCH_TAG =~ "-post" ]]; then export IS_POST="true"; fi
      - if [[ $BRANCH_TAG =~ "-beta" ]]; then export IS_BETA="true"; fi
      - if [[ $BRANCH_TAG =~ "-alpha" ]]; then export IS_PREVIEW="true"; fi
      - if [[ $IS_RC || $IS_HOTFIX || $IS_POST || $IS_BETA || $IS_PREVIEW ]]; then export IS_RELEASE="true"; fi

      - >-
        if [[ $IS_BETA || $IS_HOTFIX || $IS_POST ]]; then
            export PLATFORM_LABEL=$(echo $BRANCH_TAG | awk -F - '{print "~"$2}')
        elif [[ ! $IS_RELEASE ]]; then
            export PLATFORM_LABEL="~SNAPSHOT"
        else
            export PLATFORM_LABEL=""
        fi
      - export PACKAGING_BUILD_ARGS=" -DCONFLUENT_VERSION=$CONFLUENT_VERSION  -DCONFLUENT_PLATFORM_LABEL=$PLATFORM_LABEL -DCONFLUENT_DEB_VERSION=$CONFLUENT_DEB_VERSION  -DALLOW_UNSIGNED=$ALLOW_UNSIGNED"
      - >-
        if [[ $IS_RELEASE && $PACKAGING_BUILD_NUMBER ]]; then
          if [[ $IS_RC ]]; then
              export MAVEN_PACKAGES_URL="https://s3.us-west-2.amazonaws.com/staging-confluent-packages-maven-654654529379-us-west-2/v$BRANCH_NAME/maven"
              if [[ $PACKAGES_MAVEN_URL ]]; then
                  export MAVEN_PACKAGES_URL=$PACKAGES_MAVEN_URL
              fi
          fi
          # Overwrite maven global configuration
          . vault-sem-get-secret maven-settings-cp-dockerfile
        else
          echo "This job is not a isHotfixJob or isRcJob (What we know how to handle) - and we don't know how to handle it"
        fi
      - export DOCKER_DEV_REGISTRY="519856050701.dkr.ecr.us-west-2.amazonaws.com/docker/dev/"
      - export DOCKER_PROD_REGISTRY="519856050701.dkr.ecr.us-west-2.amazonaws.com/docker/prod/"
      - export DOCKER_UPSTREAM_REGISTRY=$DOCKER_PROD_REGISTRY
      - export LATEST_TAG=$BRANCH_TAG-latest
      - export DOCKER_UPSTREAM_TAG="$LATEST_TAG"
      # Define all available Docker repositories
      - export DOCKER_REPOS="confluentinc/cp-server-connect confluentinc/cp-server-connect-base confluentinc/cp-kafka-connect confluentinc/cp-kafka-connect-base confluentinc/cp-enterprise-kafka confluentinc/cp-kafka confluentinc/cp-server confluentinc/cp-zookeeper"
      
      # Define repositories to skip
      - export SKIP_DOCKER_REPOS="confluentinc/cp-kafka-connect confluentinc/cp-kafka-connect-base confluentinc/cp-enterprise-kafka confluentinc/cp-kafka"
      
      # Filter out skipped repositories from DOCKER_REPOS
      - DOCKER_REPOS=$(comm -23 <(echo "$DOCKER_REPOS" | tr ' ' '\n' | sort) <(echo "$SKIP_DOCKER_REPOS" | tr ' ' '\n' | sort) | tr '\n' ' ' | xargs)
      - export DOCKER_REPOS
      - echo "Filtered DOCKER_REPOS- $DOCKER_REPOS"
      
      # Check if current DOCKER_IMAGE is in SKIP_DOCKER_REPOS
      - |
        for skip_repo in $SKIP_DOCKER_REPOS; do
          if [ "$skip_repo" = "$DOCKER_IMAGE" ]; then
            echo "Skipping build for $DOCKER_IMAGE as it is in SKIP_DOCKER_REPOS list"
            export SEMAPHORE_JOB_RESULT=passed
            return 130
          fi
        done
      - export DOCKER_DEV_TAG="dev-$BRANCH_TAG-$BUILD_NUMBER"
      - export AMD_ARCH=.amd64
      - export ARM_ARCH=.arm64
blocks:
  - name: Validation
    dependencies: []
    run:
      when: "branch = 'master'"
    task:
      jobs:
        - name: Validation
          commands:
            - . sem-pint -c
  - name: Build, Test, & Scan AMD
    dependencies: ["Validation"]
    run:
      # don't run the tests on non-functional changes...
      when: "change_in('/', {exclude: ['/.deployed-versions/', '.github/']})"
    task:
      jobs:
        - name: Build, Test, & Scan ubi8
          commands:
            - export OS_TAG="-ubi8"
            - export DOCKER_DEV_FULL_IMAGES=$DOCKER_DEV_REGISTRY${DOCKER_REPOS// /:$DOCKER_DEV_TAG$OS_TAG $DOCKER_DEV_REGISTRY}:$DOCKER_DEV_TAG$OS_TAG
            - export AMD_DOCKER_DEV_FULL_IMAGES=${DOCKER_DEV_FULL_IMAGES// /$AMD_ARCH }$AMD_ARCH
            - ci-tools ci-update-version
            - export OS_PACKAGES_URL=$(echo "$PACKAGES_URL" | sed "s/PACKAGE_TYPE/rpm/g")
            - export PACKAGING_BUILD_ARGS="$PACKAGING_BUILD_ARGS -DCONFLUENT_PACKAGES_REPO=$OS_PACKAGES_URL"
            - mvn -Dmaven.wagon.http.retryHandler.count=3 --batch-mode -P jenkins,docker clean package dependency:analyze validate -U -Ddocker.registry=$DOCKER_DEV_REGISTRY -Ddocker.upstream-registry=$DOCKER_UPSTREAM_REGISTRY
              -DBUILD_NUMBER=$BUILD_NUMBER -DGIT_COMMIT=$GIT_COMMIT -Ddocker.tag=$DOCKER_DEV_TAG$OS_TAG$AMD_ARCH -Ddocker.upstream-tag=$DOCKER_UPSTREAM_TAG$OS_TAG -Darch.type=$AMD_ARCH -Ddocker.os_type=ubi8
              $PACKAGING_BUILD_ARGS -Ddependency.check.skip=true -pl !kafka,!ce-kafka,!kafka-connect-base,!kafka-connect
            - . cache-maven store
            - >-
              for dev_image in $AMD_DOCKER_DEV_FULL_IMAGES;
              do
                cve-scan $dev_image
              done
            - for image in $AMD_DOCKER_DEV_FULL_IMAGES; do echo "Pushing $image" && docker push $image; done
      epilogue:
        always:
          commands:
            - . publish-test-results
            - artifact push workflow target/test-results
            - artifact push workflow target --destination target-AMD
  - name: Deploy AMD confluentinc/cp-server-connect
    dependencies: ["Build, Test, & Scan AMD"]
    task:
      jobs:
        - name: Deploy AMD confluentinc/cp-server-connect ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-server-connect
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE AMD"
  - name: Deploy AMD confluentinc/cp-server-connect-base
    dependencies: ["Build, Test, & Scan AMD"]
    task:
      jobs:
        - name: Deploy AMD confluentinc/cp-server-connect-base ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-server-connect-base
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE AMD"
  - name: Deploy AMD confluentinc/cp-kafka-connect
    dependencies: ["Build, Test, & Scan AMD"]
    task:
      jobs:
        - name: Deploy AMD confluentinc/cp-kafka-connect ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-kafka-connect
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE AMD"
  - name: Deploy AMD confluentinc/cp-kafka-connect-base
    dependencies: ["Build, Test, & Scan AMD"]
    task:
      jobs:
        - name: Deploy AMD confluentinc/cp-kafka-connect-base ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-kafka-connect-base
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE AMD"
  - name: Deploy AMD confluentinc/cp-enterprise-kafka
    dependencies: ["Build, Test, & Scan AMD"]
    task:
      jobs:
        - name: Deploy AMD confluentinc/cp-enterprise-kafka ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-enterprise-kafka
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE AMD"
  - name: Deploy AMD confluentinc/cp-kafka
    dependencies: ["Build, Test, & Scan AMD"]
    task:
      jobs:
        - name: Deploy AMD confluentinc/cp-kafka ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-kafka
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE AMD"
  - name: Deploy AMD confluentinc/cp-server
    dependencies: ["Build, Test, & Scan AMD"]
    task:
      jobs:
        - name: Deploy AMD confluentinc/cp-server ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-server
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE AMD"
  - name: Deploy AMD confluentinc/cp-zookeeper
    dependencies: ["Build, Test, & Scan AMD"]
    task:
      jobs:
        - name: Deploy AMD confluentinc/cp-zookeeper ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-zookeeper
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE AMD"
  - name: Build & Test ARM
    dependencies: ["Validation"]
    run:
      # don't run the tests on non-functional changes...
      when: "change_in('/', {exclude: ['/.deployed-versions/', '.github/']})"
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      jobs:
        - name: Build & Test ubi8
          commands:
            - export OS_TAG="-ubi8"
            - export DOCKER_DEV_FULL_IMAGES=$DOCKER_DEV_REGISTRY${DOCKER_REPOS// /:$DOCKER_DEV_TAG$OS_TAG $DOCKER_DEV_REGISTRY}:$DOCKER_DEV_TAG$OS_TAG
            - export ARM_DOCKER_DEV_FULL_IMAGES=${DOCKER_DEV_FULL_IMAGES// /$ARM_ARCH }$ARM_ARCH
            - export OS_PACKAGES_URL=$(echo "$PACKAGES_URL" | sed "s/PACKAGE_TYPE/rpm/g")
            - export PACKAGING_BUILD_ARGS="$PACKAGING_BUILD_ARGS -DCONFLUENT_PACKAGES_REPO=$OS_PACKAGES_URL"
            - ci-tools ci-update-version
            - mvn -Dmaven.wagon.http.retryHandler.count=3 --batch-mode -P jenkins,docker clean package dependency:analyze validate -U -Ddocker.registry=$DOCKER_DEV_REGISTRY -Ddocker.upstream-registry=$DOCKER_UPSTREAM_REGISTRY
              -DBUILD_NUMBER=$BUILD_NUMBER -DGIT_COMMIT=$GIT_COMMIT -Ddocker.tag=$DOCKER_DEV_TAG$OS_TAG$ARM_ARCH -Ddocker.upstream-tag=$DOCKER_UPSTREAM_TAG$OS_TAG -Darch.type=$ARM_ARCH -Ddocker.os_type=ubi8
              $PACKAGING_BUILD_ARGS -Ddependency.check.skip=true -pl !kafka,!ce-kafka,!kafka-connect-base,!kafka-connect
            - . cache-maven store
            - for image in $ARM_DOCKER_DEV_FULL_IMAGES; do echo "Pushing $image" && docker push $image; done
      epilogue:
        always:
          commands:
            - . publish-test-results
            - artifact push workflow target/test-results
            - artifact push workflow target --destination target-ARM
  - name: Deploy ARM confluentinc/cp-server-connect
    dependencies: ["Build & Test ARM"]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      jobs:
        - name: Deploy ARM confluentinc/cp-server-connect ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-server-connect
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE ARM"
  - name: Deploy ARM confluentinc/cp-server-connect-base
    dependencies: ["Build & Test ARM"]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      jobs:
        - name: Deploy ARM confluentinc/cp-server-connect-base ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-server-connect-base
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE ARM"
  - name: Deploy ARM confluentinc/cp-kafka-connect
    dependencies: ["Build & Test ARM"]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      jobs:
        - name: Deploy ARM confluentinc/cp-kafka-connect ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-kafka-connect
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE ARM"
  - name: Deploy ARM confluentinc/cp-kafka-connect-base
    dependencies: ["Build & Test ARM"]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      jobs:
        - name: Deploy ARM confluentinc/cp-kafka-connect-base ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-kafka-connect-base
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE ARM"
  - name: Deploy ARM confluentinc/cp-enterprise-kafka
    dependencies: ["Build & Test ARM"]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      jobs:
        - name: Deploy ARM confluentinc/cp-enterprise-kafka ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-enterprise-kafka
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE ARM"
  - name: Deploy ARM confluentinc/cp-kafka
    dependencies: ["Build & Test ARM"]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      jobs:
        - name: Deploy ARM confluentinc/cp-kafka ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-kafka
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE ARM"
  - name: Deploy ARM confluentinc/cp-server
    dependencies: ["Build & Test ARM"]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      jobs:
        - name: Deploy ARM confluentinc/cp-server ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-server
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE ARM"
  - name: Deploy ARM confluentinc/cp-zookeeper
    dependencies: ["Build & Test ARM"]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      jobs:
        - name: Deploy ARM confluentinc/cp-zookeeper ubi8
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cp-zookeeper
          commands:
            - echo "Temp change - Building $DOCKER_IMAGE ARM"
  - name: Create Manifest and Maven Deploy
    dependencies: ["Deploy AMD confluentinc/cp-server-connect", "Deploy AMD confluentinc/cp-server-connect-base", "Deploy AMD confluentinc/cp-kafka-connect", "Deploy AMD confluentinc/cp-kafka-connect-base",
      "Deploy AMD confluentinc/cp-enterprise-kafka", "Deploy AMD confluentinc/cp-kafka", "Deploy AMD confluentinc/cp-server", "Deploy AMD confluentinc/cp-zookeeper", "Deploy ARM confluentinc/cp-server-connect",
      "Deploy ARM confluentinc/cp-server-connect-base", "Deploy ARM confluentinc/cp-kafka-connect", "Deploy ARM confluentinc/cp-kafka-connect-base", "Deploy ARM confluentinc/cp-enterprise-kafka", "Deploy
          ARM confluentinc/cp-kafka", "Deploy ARM confluentinc/cp-server", "Deploy ARM confluentinc/cp-zookeeper"]
    task:
      jobs:
        - name: Create Manifest and Maven Deploy
          commands:
            - export DOCKER_PROD_IMAGE_NAME=$DOCKER_PROD_REGISTRY${DOCKER_REPOS// / $DOCKER_PROD_REGISTRY}
            - |-
              if [[ ! $IS_RELEASE && ! $IS_PREVIEW ]]; then
                mvn -X -DdryRun=true -Dmaven.wagon.http.retryHandler.count=3 --batch-mode -P jenkins,docker -DaltDeploymentRepository=confluent-codeartifact-internal::default::https://confluent-519856050701.d.codeartifact.us-west-2.amazonaws.com/maven/maven-snapshots/ -DrepositoryId=confluent-codeartifact-internal deploy -DskipTests -Ddocker.skip-build=true -Ddocker.skip-test=true -pl !kafka,!ce-kafka,!kafka-connect-base,!kafka-connect
              fi
            # Create manifest
            - >-
              for image in $DOCKER_PROD_IMAGE_NAME;
              do
                echo "Temp change - Creating manifest for $image"
              done
after_pipeline:
  task:
    agent:
      machine:
        type: s1-prod-ubuntu20-04-arm64-0
    jobs:
      - name: Metrics
        commands:
          - emit-ci-metrics -p -a test-results
      - name: Publish Test Results
        commands:
          - test-results gen-pipeline-report
      - name: SonarQube
        commands:
          - checkout
          - sem-version java 11
          - artifact pull workflow target-AMD
          - artifact pull workflow target-ARM
          - emit-sonarqube-data --run_only_sonar_scan
