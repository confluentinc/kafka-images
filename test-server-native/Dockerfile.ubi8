#
# Copyright 2019 Confluent Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARG DOCKER_UPSTREAM_REGISTRY=519856050701.dkr.ecr.us-west-2.amazonaws.com/docker/prod/
ARG DOCKER_UPSTREAM_TAG=7.4.x-latest-ubi8
ARG CONFLUENT_PACKAGES_REPO=https://nightly-packages.confluent.io/7.4.x/6528/rpm/7.4
ARG CONFLUENT_VERSION=7.4.8

FROM ${DOCKER_UPSTREAM_REGISTRY}confluentinc/cp-base-new:${DOCKER_UPSTREAM_TAG} AS build-native-image

ARG PROJECT_VERSION
ARG ARTIFACT_ID
ARG GIT_COMMIT

LABEL maintainer="partner-support@confluent.io"
LABEL vendor="Confluent"
LABEL version=$GIT_COMMIT
LABEL release=$PROJECT_VERSION
LABEL name=$ARTIFACT_ID
LABEL summary="Confluent platform server image."
LABEL description="Confluent platform server image."
LABEL io.confluent.docker=true
LABEL io.confluent.docker.git.id=$GIT_COMMIT
ARG BUILD_NUMBER=-1
LABEL io.confluent.docker.build.number=$BUILD_NUMBER
LABEL io.confluent.docker.git.repo="confluentinc/kafka-images"

ARG CONFLUENT_VERSION
ARG CONFLUENT_PACKAGES_REPO
ARG CONFLUENT_PLATFORM_LABEL

# allow arg override of required env params
ARG KAFKA_ZOOKEEPER_CONNECT
ENV KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT}
ARG KAFKA_ADVERTISED_LISTENERS
ENV KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
ARG CLUSTER_ID
ENV CLUSTER_ID=${CLUSTER_ID}

ENV COMPONENT=kafka

# primary
EXPOSE 9092

USER root

RUN echo "===> Installing ${COMPONENT}..." \
    && echo "===> Adding confluent repository...${CONFLUENT_PACKAGES_REPO}" \
    && rpm --import ${CONFLUENT_PACKAGES_REPO}/archive.key \
    && printf "[Confluent.dist] \n\
name=Confluent repository (dist) \n\
baseurl=${CONFLUENT_PACKAGES_REPO}/\$releasever \n\
gpgcheck=1 \n\
gpgkey=${CONFLUENT_PACKAGES_REPO}/archive.key \n\
enabled=1 \n\
\n\
[Confluent] \n\
name=Confluent repository \n\
baseurl=${CONFLUENT_PACKAGES_REPO}/ \n\
gpgcheck=1 \n\
gpgkey=${CONFLUENT_PACKAGES_REPO}/archive.key \n\
enabled=1 " > /etc/yum.repos.d/confluent.repo \
    && echo "===> installing ${COMPONENT}..." \
    && yum install -y confluent-server-${CONFLUENT_VERSION} \
    && echo "===> clean up ..."  \
    && yum clean all \
    && rm -rf /tmp/* /etc/yum.repos.d/confluent.repo \
    && echo "===> Setting up ${COMPONENT} dirs" \
    && mkdir -p /var/lib/${COMPONENT}/data /etc/${COMPONENT}/secrets \
    && chown -R appuser:root /etc/kafka /var/log/kafka /var/log/confluent /var/lib/kafka /var/lib/zookeeper /etc/${COMPONENT}/secrets \
    && chmod -R ug+w /etc/kafka /var/lib/${COMPONENT}/data /etc/${COMPONENT}/secrets /var/log/kafka

ARG GRAALVM_VERSION=21.3.0
ARG JAVA_VERSION=java11
ARG GRAALVM_URL=https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/graalvm-ce-${JAVA_VERSION}-linux-amd64-${GRAALVM_VERSION}.tar.gz

# Download and install GraalVM
RUN curl -L $GRAALVM_URL -o graalvm.tar.gz \
    && tar -xzf graalvm.tar.gz -C /opt \
    && rm graalvm.tar.gz \
    && mv /opt/graalvm-ce-${JAVA_VERSION}-${GRAALVM_VERSION} /opt/graalvm

# Set environment variables for GraalVM
ENV GRAALVM_HOME=/opt/graalvm
ENV PATH="$GRAALVM_HOME/bin:$PATH"

# Verify GraalVM installation
RUN gu install native-image

VOLUME ["/var/lib/${COMPONENT}/data", "/etc/${COMPONENT}/secrets"]

COPY --chown=appuser:appuser include/etc/confluent/docker /etc/confluent/docker

USER appuser


# Re-declare COMPONENT variable
ARG COMPONENT=kafka
ENV COMPONENT=${COMPONENT}

# Install necessary build tools using apt (since this image is Debian-based)
USER root
# RUN apk add --no-cache build-base zlib-dev

# Set environment variables for GraalVM
ENV GRAALVM_HOME=/opt/graalvm
ENV PATH="$GRAALVM_HOME/bin:$PATH"

# Copy Kafka source code from the previous stage

# Build native image for the Kafka application
RUN mkdir /app/kafka; \
    native-image --no-fallback -cp "/app/*:/usr/share/java" kafka.Kafka -o /app/kafka/kafka.Kafka

# Stage 3: Final runtime image with native binary
FROM alpine:latest

# Copy the native executable from the GraalVM build stage
COPY --from=build-native-image /app/kafka /app/kafka

# Set permissions and the entrypoint
USER appuser
ENTRYPOINT ["/app/kafka"]

EXPOSE 9092

CMD ["/etc/confluent/docker/run"]
