#
# Copyright 2019 Confluent Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARG DOCKER_UPSTREAM_REGISTRY=519856050701.dkr.ecr.us-west-2.amazonaws.com/docker/prod/
ARG DOCKER_UPSTREAM_TAG=7.4.x-latest-ubi8
ARG CONFLUENT_PACKAGES_REPO=https://nightly-packages.confluent.io/7.4.x/6528/rpm/7.4
ARG CONFLUENT_VERSION=7.4.8

FROM ${DOCKER_UPSTREAM_REGISTRY}confluentinc/cp-base-new:${DOCKER_UPSTREAM_TAG} AS confluent-base

ARG PROJECT_VERSION
ARG ARTIFACT_ID
ARG GIT_COMMIT

LABEL maintainer="partner-support@confluent.io"
LABEL vendor="Confluent"
LABEL version=$GIT_COMMIT
LABEL release=$PROJECT_VERSION
LABEL name=$ARTIFACT_ID
LABEL summary="Confluent platform server image."
LABEL description="Confluent platform server image."
LABEL io.confluent.docker=true
LABEL io.confluent.docker.git.id=$GIT_COMMIT
ARG BUILD_NUMBER=-1
LABEL io.confluent.docker.build.number=$BUILD_NUMBER
LABEL io.confluent.docker.git.repo="confluentinc/kafka-images"

ARG CONFLUENT_VERSION
ARG CONFLUENT_PACKAGES_REPO
ARG CONFLUENT_PLATFORM_LABEL

# allow arg override of required env params
ARG KAFKA_ZOOKEEPER_CONNECT
ENV KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT}
ARG KAFKA_ADVERTISED_LISTENERS
ENV KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
ARG CLUSTER_ID
ENV CLUSTER_ID=${CLUSTER_ID}

ENV COMPONENT=kafka

# primary
EXPOSE 9092

USER root

RUN echo "===> Installing ${COMPONENT}..." \
    && echo "===> Adding confluent repository...${CONFLUENT_PACKAGES_REPO}" \
    && rpm --import ${CONFLUENT_PACKAGES_REPO}/archive.key \
    && printf "[Confluent.dist] \n\
name=Confluent repository (dist) \n\
baseurl=${CONFLUENT_PACKAGES_REPO}/\$releasever \n\
gpgcheck=1 \n\
gpgkey=${CONFLUENT_PACKAGES_REPO}/archive.key \n\
enabled=1 \n\
\n\
[Confluent] \n\
name=Confluent repository \n\
baseurl=${CONFLUENT_PACKAGES_REPO}/ \n\
gpgcheck=1 \n\
gpgkey=${CONFLUENT_PACKAGES_REPO}/archive.key \n\
enabled=1 " > /etc/yum.repos.d/confluent.repo \
    && echo "===> installing ${COMPONENT}..." \
    && yum install -y confluent-server-${CONFLUENT_VERSION} \
    && echo "===> installing confluent-rebalancer ..." \
    && yum install -y confluent-rebalancer-${CONFLUENT_VERSION} \
    && echo "===> installing confluent-security ..." \
    && yum install -y confluent-security-${CONFLUENT_VERSION} \
    && echo "===> clean up ..."  \
    && yum clean all \
    && rm -rf /tmp/* /etc/yum.repos.d/confluent.repo \
    && echo "===> Setting up ${COMPONENT} dirs" \
    && mkdir -p /var/lib/${COMPONENT}/data /etc/${COMPONENT}/secrets \
    && chown -R appuser:root /etc/kafka /var/log/kafka /var/log/confluent /var/lib/kafka /var/lib/zookeeper /etc/${COMPONENT}/secrets \
    && chmod -R ug+w /etc/kafka /var/lib/${COMPONENT}/data /etc/${COMPONENT}/secrets /var/log/kafka

VOLUME ["/var/lib/${COMPONENT}/data", "/etc/${COMPONENT}/secrets"]

# COPY --chown=appuser:appuser include/etc/confluent/docker /etc/confluent/docker


# USER appuser

# Stage 2: GraalVM for native-image
FROM ghcr.io/graalvm/graalvm-community:21 AS build-native-image
# FROM ghcr.io/graalvm/native-image-community:23-muslib AS build-native-image

WORKDIR /app

# Re-declare COMPONENT variable
ARG COMPONENT=kafka
ENV COMPONENT=kafka

# Install necessary build tools using apt (since this image is Debian-based)
USER root
# RUN apk add --no-cache build-base zlib-dev
# Install Alpine's package manager and use it to install necessary packages

# Install required build tools for GraalVM native-image
# RUN apk add --no-cache build-base zlib-dev musl-dev linux-headers

# Set environment variables for GraalVM
ENV GRAALVM_HOME=/opt/graalvm
ENV PATH="$GRAALVM_HOME/bin:$PATH"

# Copy Kafka source code from the previous stage
COPY native-image-configs /app/native-image-configs
# COPY --from=confluent-base /var/lib/${COMPONENT}/data /app
COPY --from=confluent-base /usr/share/java /usr/share/java
# COPY --from=confluent-base /usr /usr

# Build native image for the Kafka application
# --initialize-at-build-time=org.slf4j,org.apache.log4j,io.netty.buffer.UnpooledUnsafeHeapByteBuf,io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeDirectByteBuf,io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf,io.netty.buffer.UnpooledUnsafeDirectByteBuf,io.netty.buffer.UnpooledDirectByteBuf \io.netty.buffer.UnpooledUnsafeHeapByteBuf,io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeDirectByteBuf,io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf,io.netty.buffer.UnpooledUnsafeDirectByteBuf,io.netty.buffer.UnpooledDirectByteBuf \

RUN mkdir /app/kafka; \
    native-image --no-fallback -H:-CheckToolchain --enable-http \
                                                    --enable-https \
                                                    --add-exports org.graalvm.nativeimage.builder/com.oracle.svm.core.configure=ALL-UNNAMED \
                                                    --add-exports org.graalvm.nativeimage/org.graalvm.nativeimage.impl=ALL-UNNAMED \
                                                    --allow-incomplete-classpath \
                                                    --report-unsupported-elements-at-runtime \
                                                    --install-exit-handlers \
                                                    --enable-monitoring=jmxserver,jmxclient,heapdump,jvmstat \
                                                    --initialize-at-build-time=org.slf4j,org.apache.log4j \
                                                    --initialize-at-run-time=io.netty.buffer.PooledByteBufAllocator,io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBufUtil,io.netty.buffer.AbstractReferenceCountedByteBuf,io.netty.handler.ssl.JdkSslServerContext \
                                                    --trace-class-initialization=io.netty.buffer.UnpooledHeapByteBuf \
                                                    -H:+ReportExceptionStackTraces \
                                                    -H:+EnableAllSecurityServices \
                                                    -H:EnableURLProtocols=http,https \
                                                    -H:AdditionalSecurityProviders=sun.security.jgss.SunProvider \
                                                    -H:ReflectionConfigurationFiles=/app/native-image-configs/reflect-config.json \
                                                    -H:JNIConfigurationFiles=/app/native-image-configs/jni-config.json \
                                                    -H:ResourceConfigurationFiles=/app/native-image-configs/resource-config.json \
                                                    -H:SerializationConfigurationFiles=/app/native-image-configs/serialization-config.json \
                                                    -H:PredefinedClassesConfigurationFiles=/app/native-image-configs/predefined-classes-config.json \
                                                    -H:DynamicProxyConfigurationFiles=/app/native-image-configs/proxy-config.json \
                                                    --verbose \
                                                    -march=compatibility \
                                                    -cp "/usr/bin/../share/java/kafka/*:/usr/bin/../share/java/confluent-metadata-service/*:/usr/bin/../share/java/rest-utils/*:/usr/bin/../share/java/confluent-common/*:/usr/bin/../share/java/ce-kafka-http-server/*:/usr/bin/../share/java/ce-kafka-rest-servlet/*:/usr/bin/../share/java/ce-kafka-rest-extensions/*:/usr/bin/../share/java/kafka-rest-lib/*:/usr/bin/../share/java/confluent-security/kafka-rest/*:/usr/bin/../share/java/confluent-security/schema-validator/*:/usr/bin/../share/java/confluent-telemetry/*" kafka.Kafka -o /app/kafka/kafka.Kafka



$1 --no-fallback \
  --enable-http \
  --enable-https \
  --allow-incomplete-classpath \
  --report-unsupported-elements-at-runtime \
  --install-exit-handlers \
  --enable-monitoring=jmxserver,jmxclient,heapdump,jvmstat \
  -H:+ReportExceptionStackTraces \
  -H:+EnableAllSecurityServices \
  -H:EnableURLProtocols=http,https \
  -H:AdditionalSecurityProviders=sun.security.jgss.SunProvider \
  -H:ReflectionConfigurationFiles="$2"/reflect-config.json \
  -H:JNIConfigurationFiles="$2"/jni-config.json \
  -H:ResourceConfigurationFiles="$2"/resource-config.json \
  -H:SerializationConfigurationFiles="$2"/serialization-config.json \
  -H:PredefinedClassesConfigurationFiles="$2"/predefined-classes-config.json \
  -H:DynamicProxyConfigurationFiles="$2"/proxy-config.json \
  --verbose \
  -march=compatibility \
  -cp "$3/*" kafka.docker.KafkaDockerWrapper \
  -o "$4"

# Stage 3: Final runtime image with native binary
# FROM alpine:latest
# FROM ubuntu:latest
FROM ${DOCKER_UPSTREAM_REGISTRY}confluentinc/cp-base-new:${DOCKER_UPSTREAM_TAG}

# Copy the native executable from the GraalVM build stage
COPY --from=build-native-image /app /app

# COPY --from=confluent-base /etc/confluent/docker /etc/confluent/docker
# COPY --from=confluent-base /usr/local/bin /usr/local/bin
COPY include/etc/confluent/docker /etc/confluent/docker


# Set permissions and the entrypoint
# USER appuser
USER root
RUN mkdir -p /var/lib/kafka/data /etc/kafka/secrets
# ENTRYPOINT ["ls"]
# CMD ["-altr", "/app", "&&"]
# ENTRYPOINT ["/app/kafka/kafka.Kafka"]

# EXPOSE 9092

CMD ["/etc/confluent/docker/run"]
