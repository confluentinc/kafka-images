ARG DOCKER_UPSTREAM_REGISTRY=519856050701.dkr.ecr.us-west-2.amazonaws.com/docker/prod/
ARG DOCKER_UPSTREAM_TAG=8.0.x-6262-ubi9
ARG CONFLUENT_PACKAGES_REPO=https://nightly-packages.confluent.io/8.0.x/6302/rpm/8.0
ARG CONFLUENT_VERSION=8.0.0

FROM ${DOCKER_UPSTREAM_REGISTRY}confluentinc/cp-base-new:${DOCKER_UPSTREAM_TAG} AS confluent-base

ARG PROJECT_VERSION
ARG ARTIFACT_ID
ARG GIT_COMMIT

LABEL maintainer="partner-support@confluent.io"
LABEL vendor="Confluent"
LABEL version=$GIT_COMMIT
LABEL release=$PROJECT_VERSION
LABEL name=$ARTIFACT_ID
LABEL summary="Confluent platform server image."
LABEL description="Confluent platform server image."
LABEL io.confluent.docker=true
LABEL io.confluent.docker.git.id=$GIT_COMMIT
ARG BUILD_NUMBER=-1
LABEL io.confluent.docker.build.number=$BUILD_NUMBER
LABEL io.confluent.docker.git.repo="confluentinc/kafka-images"

ARG CONFLUENT_VERSION
ARG CONFLUENT_PACKAGES_REPO
ARG CONFLUENT_PLATFORM_LABEL
ARG KAFKA_ADVERTISED_LISTENERS
ENV KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
ARG CLUSTER_ID
ENV CLUSTER_ID=${CLUSTER_ID}

ENV COMPONENT=kafka
EXPOSE 9092
USER root

RUN echo "===> Installing ${COMPONENT}..." \
    && echo "===> Adding confluent repository...${CONFLUENT_PACKAGES_REPO}" \
    && rpm --import ${CONFLUENT_PACKAGES_REPO}/archive.key \
    && printf "[Confluent] \n\
name=Confluent repository \n\
baseurl=${CONFLUENT_PACKAGES_REPO}/ \n\
gpgcheck=1 \n\
gpgkey=${CONFLUENT_PACKAGES_REPO}/archive.key \n\
enabled=1 " > /etc/yum.repos.d/confluent.repo \
    && echo "===> installing ${COMPONENT}..." \
    && yum install -y confluent-server-${CONFLUENT_VERSION} \
    && echo "===> installing confluent-rebalancer ..." \
    && yum install -y confluent-rebalancer-${CONFLUENT_VERSION} \
    && echo "===> installing confluent-security ..." \
    && yum install -y confluent-security-${CONFLUENT_VERSION} \
    && echo "===> clean up ..."  \
    && yum clean all \
    && rm -rf /tmp/* /etc/yum.repos.d/confluent.repo \
    && echo "===> Setting up ${COMPONENT} dirs" \
    && mkdir -p /var/lib/${COMPONENT}/data /etc/${COMPONENT}/secrets \
    && chown -R appuser:root /etc/kafka /var/log/kafka /var/log/confluent /var/lib/kafka /etc/${COMPONENT}/secrets \
    && chmod -R ug+w /etc/kafka /var/lib/${COMPONENT}/data /etc/${COMPONENT}/secrets /var/log/kafka

VOLUME ["/var/lib/${COMPONENT}/data", "/etc/${COMPONENT}/secrets"]


# Stage 2: GraalVM for native-image
FROM ghcr.io/graalvm/graalvm-community:21 AS build-native-image

WORKDIR /app
ARG COMPONENT=kafka
ENV COMPONENT=kafka
USER root

# Set environment variables for GraalVM
ENV GRAALVM_HOME=/opt/graalvm
ENV PATH="$GRAALVM_HOME/bin:$PATH"

# Copy Kafka source code from the previous stage
COPY --from=confluent-base /usr/share/java /usr/share/java

# Copy reflection configs to create GraalVM native binary
COPY native-image-configs-800 /app/native-image-configs-800

RUN microdnf install -y zip unzip findutils coreutils tree

# Extract all native-image.properties files to /output
RUN mkdir -p /output /tmp/jar_unpack && \
    find /usr/share/java -name "*.jar" | while read jar; do \
      jar_hash=$(echo "$jar" | sha256sum | cut -d' ' -f1); \
      jar_dir="/tmp/jar_unpack/$jar_hash"; \
      mkdir -p "$jar_dir"; \
      unzip -q "$jar" 'META-INF/native-image/**/native-image.properties' -d "$jar_dir" 2>/dev/null; \
      find "$jar_dir" -name native-image.properties | while read prop; do \
        rel_jar_path="${jar#/}"; \
        dest_dir="/output/${rel_jar_path%.jar}"; \
        mkdir -p "$dest_dir"; \
        cp "$prop" "$dest_dir/"; \
        echo "âœ… Copied $prop to $dest_dir/"; \
      done; \
      rm -rf "$jar_dir"; \
    done
